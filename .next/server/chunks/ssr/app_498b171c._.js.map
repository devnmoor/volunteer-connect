{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/noramoor/Downloads/Programming/Applications/Volunteer%20Connect/volunteer-connect/app/components/greenhouse/InteractivePlantingArea.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst InteractivePlantingArea = ({ \n  plants = [], \n  onPlantGrowth, \n  onPlantWater, \n  environmentEffects \n}) => {\n  const [gridSize, setGridSize] = useState({ rows: 4, cols: 6 });\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [placedPlants, setPlacedPlants] = useState({});\n  const [draggedPlant, setDraggedPlant] = useState(null);\n  const [hoveredCell, setHoveredCell] = useState(null);\n  \n  // Initialize with any pre-placed plants\n  useEffect(() => {\n    const initialPlacement = {};\n    \n    plants.forEach(plant => {\n      if (plant.gridPosition) {\n        const cellKey = `${plant.gridPosition.row}-${plant.gridPosition.col}`;\n        initialPlacement[cellKey] = {\n          plant,\n          growthStage: plant.growthStage || 0.3, // Default to 30% grown\n          lastWatered: plant.lastWatered || null\n        };\n      }\n    });\n    \n    setPlacedPlants(initialPlacement);\n  }, [plants]);\n  \n  // Handle drag start for inventory plants\n  const handleDragStart = (plant) => {\n    setDraggedPlant(plant);\n  };\n  \n  // Handle drag over for grid cells\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    setHoveredCell({ row, col });\n  };\n  \n  // Handle drag leave\n  const handleDragLeave = () => {\n    setHoveredCell(null);\n  };\n  \n  // Handle drop for placing plants\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    \n    if (!draggedPlant) return;\n    \n    const cellKey = `${row}-${col}`;\n    \n    // Don't allow planting if cell is already occupied\n    if (placedPlants[cellKey]) return;\n    \n    // Place the plant\n    setPlacedPlants(prev => ({\n      ...prev,\n      [cellKey]: {\n        plant: draggedPlant,\n        growthStage: 0.3, // Start at 30% grown\n        lastWatered: new Date()\n      }\n    }));\n    \n    // Notify parent component\n    if (onPlantGrowth) {\n      onPlantGrowth(draggedPlant.id, 0.3);\n    }\n    \n    setDraggedPlant(null);\n    setHoveredCell(null);\n  };\n  \n  // Handle watering a plant\n  const handleWaterPlant = (row, col) => {\n    const cellKey = `${row}-${col}`;\n    const plantCell = placedPlants[cellKey];\n    \n    if (!plantCell) return;\n    \n    // Increase growth stage\n    const newGrowthStage = Math.min(1, plantCell.growthStage + 0.1);\n    \n    setPlacedPlants(prev => ({\n      ...prev,\n      [cellKey]: {\n        ...prev[cellKey],\n        growthStage: newGrowthStage,\n        lastWatered: new Date()\n      }\n    }));\n    \n    // Notify parent component\n    if (onPlantWater) {\n      onPlantWater(plantCell.plant.id, newGrowthStage);\n    }\n  };\n  \n  // Handle selecting a cell\n  const handleCellClick = (row, col) => {\n    const cellKey = `${row}-${col}`;\n    \n    if (placedPlants[cellKey]) {\n      setSelectedCell({ row, col });\n    } else {\n      setSelectedCell(null);\n    }\n  };\n  \n  // Get cell style\n  const getCellStyle = (row, col) => {\n    const cellKey = `${row}-${col}`;\n    const isOccupied = !!placedPlants[cellKey];\n    const isSelected = selectedCell && selectedCell.row === row && selectedCell.col === col;\n    const isHovered = hoveredCell && hoveredCell.row === row && hoveredCell.col === col;\n    \n    return {\n      border: isSelected \n        ? '2px solid #10B981' \n        : isHovered && !isOccupied\n          ? '2px dashed #10B981'\n          : '1px solid #E5E7EB',\n      background: isOccupied \n        ? environmentEffects.timeOfDay === 'night'\n          ? '#374151' // Dark gray at night\n          : '#F0FDF4' // Light green in day\n        : environmentEffects.timeOfDay === 'night'\n          ? '#1F2937' // Darker gray at night\n          : '#FFFFFF', // White in day\n      position: 'relative',\n      padding: '4px',\n      height: '80px',\n      transition: 'all 0.2s ease-in-out'\n    };\n  };\n  \n  return (\n    <div className=\"w-full h-full flex flex-col\">\n      <div className=\"p-2 bg-green-800 text-white text-sm font-medium\">\n        Interactive Planting Area\n      </div>\n      \n      <div className=\"flex-grow p-4 bg-green-50 overflow-auto\">\n        <div \n          className=\"grid gap-2\" \n          style={{ \n            gridTemplateColumns: `repeat(${gridSize.cols}, 1fr)`,\n            gridTemplateRows: `repeat(${gridSize.rows}, 1fr)`,\n          }}\n        >\n          {/* Create the grid cells */}\n          {Array.from({ length: gridSize.rows }).map((_, row) => (\n            Array.from({ length: gridSize.cols }).map((_, col) => {\n              const cellKey = `${row}-${col}`;\n              const plantCell = placedPlants[cellKey];\n              \n              return (\n                <div\n                  key={cellKey}\n                  className=\"relative rounded-md\"\n                  style={getCellStyle(row, col)}\n                  onDragOver={(e) => handleDragOver(e, row, col)}\n                  onDragLeave={handleDragLeave}\n                  onDrop={(e) => handleDrop(e, row, col)}\n                  onClick={() => handleCellClick(row, col)}\n                >\n                  {/* Soil texture */}\n                  <div className=\"absolute inset-0 rounded-md overflow-hidden\">\n                    <div \n                      className=\"w-full h-full bg-yellow-800 opacity-20 bg-opacity-20\" \n                      style={{ backgroundImage: 'url(/images/greenhouse/soil-texture.png)' }}\n                    ></div>\n                  </div>\n                  \n                  {/* Placed plant */}\n                  {plantCell && (\n                    <div className=\"w-full h-full flex items-center justify-center relative\">\n                      <img \n                        src={plantCell.plant.image} \n                        alt={plantCell.plant.name}\n                        className={`w-3/4 h-3/4 object-contain transition-transform duration-1000 ${environmentEffects.wind ? 'plant-sway-animation' : 'plant-animation'}`}\n                        style={{ \n                          transform: `scale(${plantCell.growthStage})`,\n                          transformOrigin: 'center bottom'\n                        }}\n                      />\n                      \n                      {/* Growth progress indicator */}\n                      <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gray-200 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-green-500 transition-all duration-500\" \n                          style={{ width: `${plantCell.growthStage * 100}%` }}\n                        ></div>\n                      </div>\n                      \n                      {/* Water droplets - show when recently watered */}\n                      {plantCell.lastWatered && (\n                        new Date().getTime() - new Date(plantCell.lastWatered).getTime() < 5000\n                      ) && (\n                        <div className=\"absolute inset-0 pointer-events-none\">\n                          {[...Array(5)].map((_, i) => (\n                            <div \n                              key={i}\n                              className=\"absolute water-animation bg-blue-400 rounded-full\"\n                              style={{\n                                width: '3px',\n                                height: '3px',\n                                top: `${Math.random() * 50 + 25}%`,\n                                left: `${Math.random() * 70 + 15}%`,\n                                animationDelay: `${Math.random() * 0.5}s`\n                              }}\n                            ></div>\n                          ))}\n                        </div>\n                      )}\n                      \n                      {/* Water button - shows on hover */}\n                      <button\n                        className=\"absolute bottom-1 right-1 w-5 h-5 bg-blue-500 hover:bg-blue-600 rounded-full text-white flex items-center justify-center opacity-0 hover:opacity-100 focus:opacity-100 transition-opacity\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleWaterPlant(row, col);\n                        }}\n                      >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n                        </svg>\n                      </button>\n                    </div>\n                  )}\n                </div>\n              );\n            })\n          ))}\n        </div>\n      </div>\n      \n      {/* Plant inventory */}\n      <div className=\"bg-white border-t p-2\">\n        <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Available Plants</h4>\n        <div className=\"flex flex-wrap gap-2\">\n          {plants.filter(p => !p.gridPosition).map((plant) => (\n            <div\n              key={plant.id}\n              className=\"border rounded-md p-2 cursor-move hover:shadow-md transition-shadow\"\n              draggable\n              onDragStart={() => handleDragStart(plant)}\n            >\n              <div className=\"flex flex-col items-center\">\n                <img \n                  src={plant.image}\n                  alt={plant.name}\n                  className=\"w-10 h-10 object-contain mb-1\"\n                />\n                <span className=\"text-xs text-center\">{plant.name}</span>\n              </div>\n            </div>\n          ))}\n          \n          {plants.filter(p => !p.gridPosition).length === 0 && (\n            <p className=\"text-sm text-gray-500 p-2\">No plants available for planting.</p>\n          )}\n        </div>\n      </div>\n      \n      {/* Selected plant details */}\n      {selectedCell && placedPlants[`${selectedCell.row}-${selectedCell.col}`] && (\n        <div className=\"bg-white border-t p-2\">\n          <div className=\"flex items-start\">\n            <img \n              src={placedPlants[`${selectedCell.row}-${selectedCell.col}`].plant.image}\n              alt={placedPlants[`${selectedCell.row}-${selectedCell.col}`].plant.name}\n              className=\"w-12 h-12 object-contain mr-3\"\n            />\n            <div>\n              <h4 className=\"font-medium text-sm\">{placedPlants[`${selectedCell.row}-${selectedCell.col}`].plant.name}</h4>\n              <p className=\"text-xs text-gray-600\">{Math.round(placedPlants[`${selectedCell.row}-${selectedCell.col}`].growthStage * 100)}% grown</p>\n              {placedPlants[`${selectedCell.row}-${selectedCell.col}`].lastWatered && (\n                <p className=\"text-xs text-gray-500\">\n                  Last watered: {new Date(placedPlants[`${selectedCell.row}-${selectedCell.col}`].lastWatered).toLocaleTimeString()}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InteractivePlantingArea;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///Users/noramoor/Downloads/Programming/Applications/Volunteer%20Connect/volunteer-connect/app/components/greenhouse/TreeGardenVisualization.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TreeGardenVisualization = ({ \n  plants = [],\n  onPlantGrowth,\n  environmentEffects\n}) => {\n  // Separate trees from other plants\n  const [trees, setTrees] = useState([]);\n  const [otherPlants, setOtherPlants] = useState([]);\n  const [plantGrowth, setPlantGrowth] = useState({});\n  const [selectedTree, setSelectedTree] = useState(null);\n  \n  // Initialize plants and growth states\n  useEffect(() => {\n    // Categorize plants\n    const treeTypes = ['tree', 'oak', 'apple', 'pine', 'cherry'];\n    \n    const treePlants = plants.filter(plant => \n      treeTypes.some(type => plant.name.toLowerCase().includes(type))\n    );\n    \n    const otherPlantsList = plants.filter(plant => \n      !treeTypes.some(type => plant.name.toLowerCase().includes(type))\n    );\n    \n    setTrees(treePlants);\n    setOtherPlants(otherPlantsList);\n    \n    // Initialize growth stages\n    const initialGrowth = {};\n    plants.forEach(plant => {\n      initialGrowth[plant.id] = Math.max(0.4, Math.random() * 0.6 + 0.4);\n    });\n    \n    setPlantGrowth(initialGrowth);\n  }, [plants]);\n  \n  // Handle watering a tree to advance its growth\n  const handleWaterTree = (tree) => {\n    const newGrowthValue = Math.min(1, (plantGrowth[tree.id] || 0.4) + 0.1);\n    \n    setPlantGrowth(prev => ({\n      ...prev,\n      [tree.id]: newGrowthValue\n    }));\n    \n    if (onPlantGrowth) {\n      onPlantGrowth(tree.id, newGrowthValue);\n    }\n  };\n  \n  // Get sky color based on time of day\n  const getSkyColor = () => {\n    switch (environmentEffects.timeOfDay) {\n      case 'day':\n        return 'bg-gradient-to-b from-blue-300 to-blue-100';\n      case 'dusk':\n        return 'bg-gradient-to-b from-orange-300 to-pink-200';\n      case 'night':\n        return 'bg-gradient-to-b from-blue-900 to-purple-900';\n      case 'dawn':\n        return 'bg-gradient-to-b from-pink-300 to-yellow-200';\n      default:\n        return 'bg-gradient-to-b from-blue-300 to-blue-100';\n    }\n  };\n  \n  // Position trees in an arc formation\n  const positionTree = (index, total) => {\n    // Create an arc formation\n    const centerX = 50; // Center position (%)\n    const bottomY = 85; // Bottom position (%)\n    const radius = 40; // Arc radius (%)\n    \n    // Calculate position on the arc\n    const angle = (index / (total - 1)) * Math.PI;\n    const x = centerX - (radius * Math.cos(angle));\n    const y = bottomY - (radius/2 * Math.sin(angle));\n    \n    // Add a slight random offset for natural feel\n    const offsetX = (Math.random() - 0.5) * 5;\n    const offsetY = (Math.random() - 0.5) * 2;\n    \n    return {\n      left: `${x + offsetX}%`,\n      top: `${y + offsetY}%`,\n      zIndex: Math.floor(y) // Trees in front are drawn over trees in back\n    };\n  };\n  \n  return (\n    <div className=\"w-full h-full relative overflow-hidden\">\n      {/* Sky background */}\n      <div className={`absolute inset-0 ${getSkyColor()}`}></div>\n      \n      {/* Ground */}\n      <div className=\"absolute bottom-0 left-0 right-0 h-1/3 bg-gradient-to-t from-green-700 to-green-500\"></div>\n      \n      {/* Sun/Moon */}\n      <div \n        className={`absolute rounded-full transition-all duration-1000 ${\n          environmentEffects.timeOfDay === 'night' \n            ? 'bg-gray-200 w-16 h-16 top-12 right-12' // Moon \n            : 'bg-yellow-300 w-24 h-24 top-8 right-24' // Sun\n        }`}\n      ></div>\n      \n      {/* Rain effect */}\n      {environmentEffects.rain && (\n        <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n          {[...Array(50)].map((_, i) => (\n            <div \n              key={`rain-${i}`}\n              className=\"absolute top-0 bg-blue-400 opacity-70\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                width: '1px',\n                height: `${Math.random() * 15 + 10}px`,\n                animationDuration: `${Math.random() * 0.5 + 0.5}s`,\n                animationDelay: `${Math.random() * 1.5}s`,\n                animation: 'water-drop 1.5s linear infinite'\n              }}\n            ></div>\n          ))}\n        </div>\n      )}\n      \n      {/* Trees */}\n      {trees.map((tree, index) => {\n        const position = positionTree(index, Math.max(trees.length, 3));\n        const growthLevel = plantGrowth[tree.id] || 0.5;\n        \n        return (\n          <div \n            key={tree.id}\n            className=\"absolute cursor-pointer transition-transform\"\n            style={{\n              ...position,\n              transform: `scale(${growthLevel * 0.8 + 0.5}) ${environmentEffects.wind ? 'rotate(-2deg)' : ''}`,\n              transformOrigin: 'center bottom',\n              width: '120px',\n              height: '200px',\n              transition: 'transform 0.5s ease-in-out'\n            }}\n            onClick={() => setSelectedTree(tree)}\n          >\n            {/* Tree animation */}\n            <div className={`w-full h-full relative ${environmentEffects.wind ? 'plant-sway-animation' : ''}`}>\n              <img \n                src={tree.image}\n                alt={tree.name}\n                className=\"w-full h-full object-contain object-bottom\"\n              />\n              \n              {/* Growth indicator */}\n              <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-1 bg-white bg-opacity-50 rounded-full overflow-hidden\">\n                <div \n                  className=\"h-full bg-green-500\" \n                  style={{ width: `${growthLevel * 100}%` }}\n                ></div>\n              </div>\n              \n              {/* Water button */}\n              <button\n                className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 w-8 h-8 bg-blue-500 hover:bg-blue-600 rounded-full text-white flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleWaterTree(tree);\n                }}\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        );\n      })}\n      \n      {/* Other plants in the foreground */}\n      {otherPlants.slice(0, 8).map((plant, index) => {\n        const leftPos = 10 + (index * 10) + (Math.random() * 5);\n        \n        return (\n          <div \n            key={plant.id}\n            className={`absolute bottom-2 cursor-pointer ${environmentEffects.wind ? 'plant-sway-animation' : 'plant-animation'}`}\n            style={{\n              left: `${leftPos}%`,\n              width: '60px',\n              height: '80px',\n              zIndex: 50 + index\n            }}\n          >\n            <img \n              src={plant.image}\n              alt={plant.name}\n              className=\"w-full h-full object-contain object-bottom\"\n            />\n          </div>\n        );\n      })}\n      \n      {/* Selected tree details */}\n      {selectedTree && (\n        <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-3 rounded-lg shadow-lg max-w-xs\">\n          <div className=\"flex justify-between items-start\">\n            <h4 className=\"font-medium text-sm\">{selectedTree.name}</h4>\n            <button \n              onClick={() => setSelectedTree(null)}\n              className=\"text-gray-500 hover:text-gray-700\"\n            >\n              &times;\n            </button>\n          </div>\n          <p className=\"text-xs text-gray-600 mt-1\">{selectedTree.description}</p>\n          <div className=\"mt-2 flex items-center\">\n            <div className=\"flex-grow h-1 bg-gray-200 rounded-full overflow-hidden\">\n              <div \n                className=\"h-full bg-green-500\" \n                style={{ width: `${(plantGrowth[selectedTree.id] || 0.5) * 100}%` }}\n              ></div>\n            </div>\n            <span className=\"ml-2 text-xs text-gray-600\">\n              {Math.round((plantGrowth[selectedTree.id] || 0.5) * 100)}%\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TreeGardenVisualization;"],"names":[],"mappings":";;;;AAAA;;;AAEA,MAAM,0BAA0B,CAAC,EAC/B,SAAS,EAAE,EACX,aAAa,EACb,kBAAkB,EACnB;IACC,mCAAmC;IACnC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACrC,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACjD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAChD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,sCAAsC;IACtC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,oBAAoB;QACpB,MAAM,YAAY;YAAC;YAAQ;YAAO;YAAS;YAAQ;SAAS;QAE5D,MAAM,aAAa,OAAO,MAAM,CAAC,CAAA,QAC/B,UAAU,IAAI,CAAC,CAAA,OAAQ,MAAM,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAG3D,MAAM,kBAAkB,OAAO,MAAM,CAAC,CAAA,QACpC,CAAC,UAAU,IAAI,CAAC,CAAA,OAAQ,MAAM,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAG5D,SAAS;QACT,eAAe;QAEf,2BAA2B;QAC3B,MAAM,gBAAgB,CAAC;QACvB,OAAO,OAAO,CAAC,CAAA;YACb,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,KAAK,MAAM,KAAK,MAAM;QAChE;QAEA,eAAe;IACjB,GAAG;QAAC;KAAO;IAEX,+CAA+C;IAC/C,MAAM,kBAAkB,CAAC;QACvB,MAAM,iBAAiB,KAAK,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,IAAI,GAAG,IAAI;QAEnE,eAAe,CAAA,OAAQ,CAAC;gBACtB,GAAG,IAAI;gBACP,CAAC,KAAK,EAAE,CAAC,EAAE;YACb,CAAC;QAED,IAAI,eAAe;YACjB,cAAc,KAAK,EAAE,EAAE;QACzB;IACF;IAEA,qCAAqC;IACrC,MAAM,cAAc;QAClB,OAAQ,mBAAmB,SAAS;YAClC,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,qCAAqC;IACrC,MAAM,eAAe,CAAC,OAAO;QAC3B,0BAA0B;QAC1B,MAAM,UAAU,IAAI,sBAAsB;QAC1C,MAAM,UAAU,IAAI,sBAAsB;QAC1C,MAAM,SAAS,IAAI,iBAAiB;QAEpC,gCAAgC;QAChC,MAAM,QAAQ,AAAC,QAAQ,CAAC,QAAQ,CAAC,IAAK,KAAK,EAAE;QAC7C,MAAM,IAAI,UAAW,SAAS,KAAK,GAAG,CAAC;QACvC,MAAM,IAAI,UAAW,SAAO,IAAI,KAAK,GAAG,CAAC;QAEzC,8CAA8C;QAC9C,MAAM,UAAU,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;QACxC,MAAM,UAAU,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;QAExC,OAAO;YACL,MAAM,GAAG,IAAI,QAAQ,CAAC,CAAC;YACvB,KAAK,GAAG,IAAI,QAAQ,CAAC,CAAC;YACtB,QAAQ,KAAK,KAAK,CAAC,GAAG,8CAA8C;QACtE;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAW,CAAC,iBAAiB,EAAE,eAAe;;;;;;0BAGnD,8OAAC;gBAAI,WAAU;;;;;;0BAGf,8OAAC;gBACC,WAAW,CAAC,mDAAmD,EAC7D,mBAAmB,SAAS,KAAK,UAC7B,wCAAwC,QAAQ;mBAChD,yCAAyC,MAAM;kBACnD;;;;;;YAIH,mBAAmB,IAAI,kBACtB,8OAAC;gBAAI,WAAU;0BACZ;uBAAI,MAAM;iBAAI,CAAC,GAAG,CAAC,CAAC,GAAG,kBACtB,8OAAC;wBAEC,WAAU;wBACV,OAAO;4BACL,MAAM,GAAG,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC;4BAC/B,OAAO;4BACP,QAAQ,GAAG,KAAK,MAAM,KAAK,KAAK,GAAG,EAAE,CAAC;4BACtC,mBAAmB,GAAG,KAAK,MAAM,KAAK,MAAM,IAAI,CAAC,CAAC;4BAClD,gBAAgB,GAAG,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC;4BACzC,WAAW;wBACb;uBATK,CAAC,KAAK,EAAE,GAAG;;;;;;;;;;YAgBvB,MAAM,GAAG,CAAC,CAAC,MAAM;gBAChB,MAAM,WAAW,aAAa,OAAO,KAAK,GAAG,CAAC,MAAM,MAAM,EAAE;gBAC5D,MAAM,cAAc,WAAW,CAAC,KAAK,EAAE,CAAC,IAAI;gBAE5C,qBACE,8OAAC;oBAEC,WAAU;oBACV,OAAO;wBACL,GAAG,QAAQ;wBACX,WAAW,CAAC,MAAM,EAAE,cAAc,MAAM,IAAI,EAAE,EAAE,mBAAmB,IAAI,GAAG,kBAAkB,IAAI;wBAChG,iBAAiB;wBACjB,OAAO;wBACP,QAAQ;wBACR,YAAY;oBACd;oBACA,SAAS,IAAM,gBAAgB;8BAG/B,cAAA,8OAAC;wBAAI,WAAW,CAAC,uBAAuB,EAAE,mBAAmB,IAAI,GAAG,yBAAyB,IAAI;;0CAC/F,8OAAC;gCACC,KAAK,KAAK,KAAK;gCACf,KAAK,KAAK,IAAI;gCACd,WAAU;;;;;;0CAIZ,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCACC,WAAU;oCACV,OAAO;wCAAE,OAAO,GAAG,cAAc,IAAI,CAAC,CAAC;oCAAC;;;;;;;;;;;0CAK5C,8OAAC;gCACC,WAAU;gCACV,SAAS,CAAC;oCACR,EAAE,eAAe;oCACjB,gBAAgB;gCAClB;0CAEA,cAAA,8OAAC;oCAAI,OAAM;oCAA6B,WAAU;oCAAU,MAAK;oCAAO,SAAQ;oCAAY,QAAO;8CACjG,cAAA,8OAAC;wCAAK,eAAc;wCAAQ,gBAAe;wCAAQ,aAAa;wCAAG,GAAE;;;;;;;;;;;;;;;;;;;;;;mBArCtE,KAAK,EAAE;;;;;YA2ClB;YAGC,YAAY,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,OAAO;gBACnC,MAAM,UAAU,KAAM,QAAQ,KAAO,KAAK,MAAM,KAAK;gBAErD,qBACE,8OAAC;oBAEC,WAAW,CAAC,iCAAiC,EAAE,mBAAmB,IAAI,GAAG,yBAAyB,mBAAmB;oBACrH,OAAO;wBACL,MAAM,GAAG,QAAQ,CAAC,CAAC;wBACnB,OAAO;wBACP,QAAQ;wBACR,QAAQ,KAAK;oBACf;8BAEA,cAAA,8OAAC;wBACC,KAAK,MAAM,KAAK;wBAChB,KAAK,MAAM,IAAI;wBACf,WAAU;;;;;;mBAZP,MAAM,EAAE;;;;;YAgBnB;YAGC,8BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAuB,aAAa,IAAI;;;;;;0CACtD,8OAAC;gCACC,SAAS,IAAM,gBAAgB;gCAC/B,WAAU;0CACX;;;;;;;;;;;;kCAIH,8OAAC;wBAAE,WAAU;kCAA8B,aAAa,WAAW;;;;;;kCACnE,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCACC,WAAU;oCACV,OAAO;wCAAE,OAAO,GAAG,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;oCAAC;;;;;;;;;;;0CAGtE,8OAAC;gCAAK,WAAU;;oCACb,KAAK,KAAK,CAAC,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,IAAI,GAAG,IAAI;oCAAK;;;;;;;;;;;;;;;;;;;;;;;;;AAOvE;uCAEe","debugId":null}},
    {"offset": {"line": 774, "column": 0}, "map": {"version":3,"sources":["file:///Users/noramoor/Downloads/Programming/Applications/Volunteer%20Connect/volunteer-connect/app/components/greenhouse/GreenhouseVisualization.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport InteractivePlantingArea from './InteractivePlantingArea';\nimport TreeGardenVisualization from './TreeGardenVisualization';\n\nconst ROOMS = {\n  MAIN: 'main-growing-room',\n  PROPAGATION: 'propagation-room',\n  SHOWCASE: 'showcase-room',\n  CARE: 'watering-care-station',\n  WORKSHOP: 'storage-workshop',\n  MARKET: 'market-room',\n  LAB: 'hybrid-lab'\n};\n\nconst GreenhouseVisualization = ({ \n  plants = [], \n  accessories = [], \n  specialItems = [], \n  onItemPlace,\n  onItemMove\n}) => {\n  const [currentRoom, setCurrentRoom] = useState(ROOMS.MAIN);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [placedItems, setPlacedItems] = useState({\n    [ROOMS.MAIN]: [],\n    [ROOMS.PROPAGATION]: [],\n    [ROOMS.SHOWCASE]: [],\n    [ROOMS.CARE]: [],\n    [ROOMS.WORKSHOP]: [],\n    [ROOMS.MARKET]: [],\n    [ROOMS.LAB]: []\n  });\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [showInventory, setShowInventory] = useState(false);\n\n  // Add weather and environmental effects\n  const [environmentEffects, setEnvironmentEffects] = useState({\n    sunlight: 60, // 0-100 level\n    rain: false,\n    wind: false,\n    timeOfDay: 'day', // day, dusk, night, dawn\n  });\n  \n  // Growth stages for plants\n  const [plantGrowth, setPlantGrowth] = useState({});\n  \n  // Initialize plant growth stages\n  useEffect(() => {\n    const initialGrowth = {};\n    plants.forEach(plant => {\n      // Random growth stage between 0.3 and 1 (fully grown)\n      initialGrowth[plant.id] = Math.max(0.3, Math.random() * 0.7 + 0.3);\n    });\n    setPlantGrowth(initialGrowth);\n  }, [plants]);\n  \n  // Function to advance plant growth\n  const advancePlantGrowth = (plantId) => {\n    setPlantGrowth(prev => ({\n      ...prev,\n      [plantId]: Math.min(1, (prev[plantId] || 0) + 0.1)\n    }));\n  };\n  \n  // Toggle rain effect\n  const toggleRain = () => {\n    setEnvironmentEffects(prev => ({\n      ...prev,\n      rain: !prev.rain\n    }));\n    \n    // If turning on rain, advance growth of all plants\n    if (!environmentEffects.rain) {\n      const newGrowth = { ...plantGrowth };\n      plants.forEach(plant => {\n        newGrowth[plant.id] = Math.min(1, (newGrowth[plant.id] || 0) + 0.05);\n      });\n      setPlantGrowth(newGrowth);\n    }\n  };\n  \n  // Toggle wind effect\n  const toggleWind = () => {\n    setEnvironmentEffects(prev => ({\n      ...prev,\n      wind: !prev.wind\n    }));\n  };\n  \n  // Change time of day\n  const changeTimeOfDay = (time) => {\n    setEnvironmentEffects(prev => ({\n      ...prev,\n      timeOfDay: time\n    }));\n  };\n  \n  // Apply sunlight to a plant\n  const applySunlight = (plantId) => {\n    advancePlantGrowth(plantId);\n  };\n\n  // Initialize placed items with saved positions if available\n  useEffect(() => {\n    // Group items by their current room placement\n    const initialPlacement = {\n      [ROOMS.MAIN]: [],\n      [ROOMS.PROPAGATION]: [],\n      [ROOMS.SHOWCASE]: [],\n      [ROOMS.CARE]: [],\n      [ROOMS.WORKSHOP]: [],\n      [ROOMS.MARKET]: [],\n      [ROOMS.LAB]: []\n    };\n    \n    // Add plants with their saved positions or default to main room\n    plants.forEach(plant => {\n      const room = plant.placement?.room || ROOMS.MAIN;\n      const position = plant.placement?.position || { x: 0, y: 0 };\n      \n      initialPlacement[room].push({\n        ...plant,\n        type: 'plant',\n        position\n      });\n    });\n    \n    // Add accessories with their saved positions\n    accessories.forEach(accessory => {\n      const room = accessory.placement?.room || ROOMS.MAIN;\n      const position = accessory.placement?.position || { x: 0, y: 0 };\n      \n      initialPlacement[room].push({\n        ...accessory,\n        type: 'accessory',\n        position\n      });\n    });\n    \n    // Add special items with their saved positions\n    specialItems.forEach(item => {\n      const room = item.placement?.room || ROOMS.MAIN;\n      const position = item.placement?.position || { x: 0, y: 0 };\n      \n      initialPlacement[room].push({\n        ...item,\n        type: 'special',\n        position\n      });\n    });\n    \n    setPlacedItems(initialPlacement);\n  }, [plants, accessories, specialItems]);\n\n  // Handle drag start for inventory item\n  const handleDragStart = (item) => {\n    setDraggedItem(item);\n  };\n\n  // Handle drag over for drop zone\n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  // Handle drop for placing item\n  const handleDrop = (e) => {\n    e.preventDefault();\n    if (!draggedItem) return;\n    \n    // Calculate position relative to drop zone\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Check if this is an item from inventory or already placed\n    if (draggedItem.isInventory) {\n      // Add to current room from inventory\n      const newPlacedItems = { ...placedItems };\n      newPlacedItems[currentRoom].push({\n        ...draggedItem.item,\n        position: { x, y }\n      });\n      \n      setPlacedItems(newPlacedItems);\n      \n      // Notify parent component\n      if (onItemPlace) {\n        onItemPlace(draggedItem.item, currentRoom, { x, y });\n      }\n    } else {\n      // Move existing item\n      const updatedItems = { ...placedItems };\n      \n      // Find and update the item position\n      const item = updatedItems[currentRoom].find(i => i.id === draggedItem.id);\n      if (item) {\n        item.position = { x, y };\n        setPlacedItems(updatedItems);\n        \n        // Notify parent component\n        if (onItemMove) {\n          onItemMove(item, currentRoom, { x, y });\n        }\n      }\n    }\n    \n    setDraggedItem(null);\n  };\n\n  // Get room background image\n  const getRoomBackground = () => {\n    switch (currentRoom) {\n      case ROOMS.MAIN:\n        return '/images/greenhouse/main-room.jpg';\n      case ROOMS.PROPAGATION:\n        return '/images/greenhouse/propagation-room.jpg';\n      case ROOMS.SHOWCASE:\n        return '/images/greenhouse/showcase-room.jpg';\n      case ROOMS.CARE:\n        return '/images/greenhouse/care-station.jpg';\n      case ROOMS.WORKSHOP:\n        return '/images/greenhouse/workshop.jpg';\n      case ROOMS.MARKET:\n        return '/images/greenhouse/market-room.jpg';\n      case ROOMS.LAB:\n        return '/images/greenhouse/lab.jpg';\n      default:\n        return '/images/greenhouse/main-room.jpg';\n    }\n  };\n\n  // Get room name for display\n  const getRoomName = () => {\n    switch (currentRoom) {\n      case ROOMS.MAIN:\n        return 'Main Growing Room';\n      case ROOMS.PROPAGATION:\n        return 'Propagation Room';\n      case ROOMS.SHOWCASE:\n        return 'Showcase Room';\n      case ROOMS.CARE:\n        return 'Watering & Care Station';\n      case ROOMS.WORKSHOP:\n        return 'Storage & Workshop';\n      case ROOMS.MARKET:\n        return 'Market Room';\n      case ROOMS.LAB:\n        return 'Hybrid Lab';\n      default:\n        return 'Greenhouse';\n    }\n  };\n\n  // Combine all items for inventory\n  const inventoryItems = [\n    ...plants.filter(p => !p.placement),\n    ...accessories.filter(a => !a.placement),\n    ...specialItems.filter(s => !s.placement)\n  ];\n\n  return (\n    <div className=\"w-full h-full flex flex-col\">\n      {/* Room Navigation */}\n      <div className=\"bg-green-800 text-white p-2 flex justify-between items-center\">\n        <h3 className=\"font-medium\">{getRoomName()}</h3>\n        <div className=\"flex space-x-2\">\n          <button \n            onClick={() => setShowInventory(!showInventory)}\n            className=\"px-3 py-1 bg-green-700 hover:bg-green-600 rounded text-sm\"\n          >\n            {showInventory ? 'Hide Inventory' : 'Show Inventory'}\n          </button>\n          \n          {/* Environment controls */}\n          <div className=\"flex space-x-1\">\n            {/* Sun button */}\n            <button\n              onClick={() => changeTimeOfDay(environmentEffects.timeOfDay === 'day' ? 'night' : 'day')}\n              className={`p-1 rounded ${environmentEffects.timeOfDay === 'day' ? 'bg-yellow-500' : 'bg-blue-800'}`}\n              title={environmentEffects.timeOfDay === 'day' ? 'Switch to Night' : 'Switch to Day'}\n            >\n              {environmentEffects.timeOfDay === 'day' ? (\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-yellow-100\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\n                </svg>\n              ) : (\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-100\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\n                </svg>\n              )}\n            </button>\n            \n            {/* Rain button */}\n            <button\n              onClick={toggleRain}\n              className={`p-1 rounded ${environmentEffects.rain ? 'bg-blue-600' : 'bg-gray-600'}`}\n              title={environmentEffects.rain ? 'Stop Rain' : 'Start Rain'}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-100\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n              </svg>\n            </button>\n            \n            {/* Wind button */}\n            <button\n              onClick={toggleWind}\n              className={`p-1 rounded ${environmentEffects.wind ? 'bg-blue-600' : 'bg-gray-600'}`}\n              title={environmentEffects.wind ? 'Stop Wind' : 'Start Wind'}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-100\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Room tabs */}\n      <div className=\"bg-green-700 text-white flex overflow-x-auto\">\n        {Object.values(ROOMS).map((room) => (\n          <button\n            key={room}\n            onClick={() => setCurrentRoom(room)}\n            className={`px-4 py-2 text-sm whitespace-nowrap ${\n              currentRoom === room \n                ? 'bg-green-600 font-medium' \n                : 'hover:bg-green-600'\n            }`}\n          >\n            {room === ROOMS.MAIN ? 'Main Growing Room' :\n             room === ROOMS.PROPAGATION ? 'Propagation Room' :\n             room === ROOMS.SHOWCASE ? 'Showcase Room' :\n             room === ROOMS.CARE ? 'Care Station' :\n             room === ROOMS.WORKSHOP ? 'Workshop' :\n             room === ROOMS.MARKET ? 'Market' : 'Lab'}\n          </button>\n        ))}\n      </div>\n      \n      {/* 3D Visualization */}\n      <div className=\"relative flex-grow flex\">\n        {/* Room rendering */}\n        <div \n          className=\"w-full h-full relative overflow-hidden\" \n          onDragOver={handleDragOver}\n          onDrop={handleDrop}\n          style={{\n            backgroundImage: `url(${getRoomBackground()})`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center'\n          }}\n        >\n          {/* Room rendering - Different visualizations based on room */}\n          {currentRoom === ROOMS.PROPAGATION ? (\n            <InteractivePlantingArea \n              plants={plants}\n              onPlantGrowth={(plantId, growthStage) => {\n                // Update the plant growth state\n                setPlantGrowth(prev => ({\n                  ...prev,\n                  [plantId]: growthStage\n                }));\n              }}\n              onPlantWater={(plantId, growthStage) => {\n                // Update the plant growth state\n                setPlantGrowth(prev => ({\n                  ...prev,\n                  [plantId]: growthStage\n                }));\n              }}\n              environmentEffects={environmentEffects}\n            />\n          ) : currentRoom === ROOMS.MAIN ? (\n            <TreeGardenVisualization\n              plants={plants}\n              onPlantGrowth={advancePlantGrowth}\n              environmentEffects={environmentEffects}\n            />\n          ) : (\n            <>\n              {/* Environmental effects */}\n              {/* Rain effect */}\n              {environmentEffects.rain && (\n                <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n                  {[...Array(30)].map((_, i) => (\n                    <div \n                      key={`rain-${i}`}\n                      className=\"absolute top-0 bg-blue-400 opacity-70\"\n                      style={{\n                        left: `${Math.random() * 100}%`,\n                        width: '1px',\n                        height: `${Math.random() * 15 + 10}px`,\n                        animationDuration: `${Math.random() * 0.5 + 0.5}s`,\n                        animationDelay: `${Math.random() * 1.5}s`,\n                        animation: 'water-drop 1.5s linear infinite'\n                      }}\n                    ></div>\n                  ))}\n                </div>\n              )}\n              \n              {/* Wind effect */}\n              {environmentEffects.wind && (\n                <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n                  {[...Array(15)].map((_, i) => (\n                    <div \n                      key={`wind-${i}`}\n                      className=\"absolute bg-white opacity-30\"\n                      style={{\n                        top: `${Math.random() * 100}%`,\n                        left: '0%',\n                        width: `${Math.random() * 50 + 30}px`,\n                        height: '1px',\n                        animation: 'plant-sway 3s linear infinite',\n                        animationDelay: `${Math.random() * 3}s`\n                      }}\n                    ></div>\n                  ))}\n                </div>\n              )}\n              \n              {/* Day/Night overlay */}\n              {environmentEffects.timeOfDay !== 'day' && (\n                <div \n                  className=\"absolute inset-0 pointer-events-none bg-blue-900 transition-opacity duration-1000\"\n                  style={{ \n                    opacity: environmentEffects.timeOfDay === 'night' ? 0.5 : \n                              environmentEffects.timeOfDay === 'dusk' ? 0.3 :\n                              environmentEffects.timeOfDay === 'dawn' ? 0.2 : 0\n                  }}\n                ></div>\n              )}\n              \n              {/* Placed items in current room */}\n              {placedItems[currentRoom].map((item, index) => (\n                <div\n                  key={`${item.id}-${index}`}\n                  className=\"absolute cursor-move hover:z-50 transition-transform hover:scale-105\"\n                  style={{\n                    left: `${item.position.x}px`,\n                    top: `${item.position.y}px`,\n                    width: '80px',\n                    height: '80px'\n                  }}\n                  draggable\n                  onDragStart={() => setDraggedItem(item)}\n                  onClick={() => setSelectedItem(item)}\n                >\n                  <img \n                    src={item.image} \n                    alt={item.name}\n                    className=\"w-full h-full object-contain\"\n                  />\n                  \n                  {/* Item label on hover */}\n                  <div className=\"opacity-0 hover:opacity-100 absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 text-white text-xs text-center py-1 transition-opacity\">\n                    {item.name}\n                  </div>\n                  \n                  {/* Animations for different item types */}\n                  {item.type === 'plant' && (\n                    <>\n                      <div className=\"absolute inset-0 animate-pulse-slow opacity-10 bg-green-200 rounded-full\"></div>\n                      <div \n                        className={`absolute inset-0 ${environmentEffects.wind ? 'plant-sway-animation' : 'plant-animation'}`}\n                        style={{ \n                          transform: `scale(${plantGrowth[item.id] || 0.5})`,\n                          opacity: (plantGrowth[item.id] || 0.5) * 0.6 + 0.4,\n                        }}\n                      ></div>\n                      \n                      {/* Growth stage indicator */}\n                      <div className=\"absolute -bottom-2 left-0 right-0 h-1 bg-gray-200 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-green-500 transition-all duration-1000\" \n                          style={{ width: `${(plantGrowth[item.id] || 0) * 100}%` }}\n                        ></div>\n                      </div>\n                      \n                      {/* Water button for plants */}\n                      <button\n                        className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 w-6 h-6 bg-blue-500 hover:bg-blue-600 rounded-full text-white flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity focus:outline-none\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          advancePlantGrowth(item.id);\n                        }}\n                        title=\"Water plant\"\n                      >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n                        </svg>\n                      </button>\n                    </>\n                  )}\n                  {item.type === 'accessory' && item.name.toLowerCase().includes('water') && (\n                    <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 water-animation\">\n                      <div className=\"w-1 h-1 bg-blue-400 rounded-full\"></div>\n                    </div>\n                  )}\n                  {item.type === 'special' && (\n                    <div className=\"absolute inset-0 sparkle-animation\">\n                      <div className=\"absolute top-0 right-0 w-2 h-2 bg-yellow-300 rounded-full opacity-70\"></div>\n                      <div className=\"absolute bottom-1/4 left-1/4 w-2 h-2 bg-yellow-300 rounded-full opacity-70\" style={{animationDelay: '0.5s'}}></div>\n                      <div className=\"absolute top-1/3 left-1/2 w-2 h-2 bg-yellow-300 rounded-full opacity-70\" style={{animationDelay: '1s'}}></div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </>\n          )}\n          \n          {/* Selected item info */}\n          {selectedItem && (\n            <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-3 rounded-lg shadow-lg max-w-xs\">\n              <div className=\"flex justify-between items-start\">\n                <h4 className=\"font-medium text-sm\">{selectedItem.name}</h4>\n                <button \n                  onClick={() => setSelectedItem(null)}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                >\n                  &times;\n                </button>\n              </div>\n              <p className=\"text-xs text-gray-600 mt-1\">{selectedItem.description}</p>\n            </div>\n          )}\n        </div>\n        \n        {/* Inventory panel */}\n        {showInventory && (\n          <div className=\"w-64 bg-white border-l border-gray-200 overflow-y-auto\">\n            <div className=\"p-3 border-b border-gray-200\">\n              <h3 className=\"font-medium text-sm\">Inventory</h3>\n            </div>\n            \n            {inventoryItems.length === 0 ? (\n              <div className=\"p-4 text-center text-gray-500 text-sm\">\n                No items in inventory\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 gap-2 p-2\">\n                {inventoryItems.map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"border rounded p-2 flex flex-col items-center cursor-move hover:bg-gray-50\"\n                    draggable\n                    onDragStart={() => handleDragStart({ item, isInventory: true })}\n                  >\n                    <img \n                      src={item.image} \n                      alt={item.name}\n                      className=\"w-12 h-12 object-contain\"\n                    />\n                    <span className=\"text-xs mt-1 text-center\">{item.name}</span>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GreenhouseVisualization;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1608, "column": 0}, "map": {"version":3,"sources":["file:///Users/noramoor/Downloads/Programming/Applications/Volunteer%20Connect/volunteer-connect/app/greenhouse/page.tsx"],"sourcesContent":["// app/greenhouse/page.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { auth, db } from '@/app/lib/firebase/config';\nimport { getUserProfile, UserProfile } from '@/app/lib/firebase/auth';\nimport { \n  doc, \n  getDoc, \n  updateDoc, \n  collection, \n  query, \n  where, \n  getDocs,\n  serverTimestamp\n} from 'firebase/firestore';\nimport GreenhouseVisualization from '@/app/components/greenhouse/GreenhouseVisualization';\n\ninterface PlantOrItem {\n  id: string;\n  name: string;\n  image: string;\n  description: string;\n  seedCost: number;\n  type: 'plant' | 'accessory' | 'special';\n  placement?: {\n    room: string;\n    position: {\n      x: number;\n      y: number;\n    };\n  };\n}\n\nconst Greenhouse = () => {\n  const router = useRouter();\n  const [user, setUser] = useState<any>(null);\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [plants, setPlants] = useState<PlantOrItem[]>([]);\n  const [accessories, setAccessories] = useState<PlantOrItem[]>([]);\n  const [specialItems, setSpecialItems] = useState<PlantOrItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [isIdentityConfirmed, setIsIdentityConfirmed] = useState(true); // Changed to true for demo\n  const [fullName, setFullName] = useState('');\n  const [showItemDetails, setShowItemDetails] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<PlantOrItem | null>(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        setUser(user);\n        try {\n          // Get user profile\n          const userProfile = await getUserProfile(user.uid);\n          if (userProfile) {\n            setProfile(userProfile);\n            \n            // Fetch user's items from Firestore\n            await fetchUserItems(user.uid);\n          } else {\n            router.push('/auth/onboarding');\n          }\n        } catch (err: any) {\n          setError(err.message);\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        router.push('/auth/sign-in');\n      }\n    });\n\n    return () => unsubscribe();\n  }, [router]);\n\n  // Fetch user's purchased items\n  const fetchUserItems = async (userId: string) => {\n    try {\n      // Get user's document\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      \n      if (!userDoc.exists()) {\n        throw new Error('User not found');\n      }\n      \n      const userData = userDoc.data();\n      \n      // Get owned items from user profile\n      const ownedItems = userData.ownedItems || {\n        plants: [],\n        accessories: [],\n        specials: []\n      };\n      \n      // Fetch all store items\n      const storeItemsRef = collection(db, 'storeItems');\n      const storeItemsSnapshot = await getDocs(storeItemsRef);\n      \n      const allStoreItems: { [key: string]: PlantOrItem } = {};\n      \n      storeItemsSnapshot.forEach(doc => {\n        allStoreItems[doc.id] = { \n          id: doc.id, \n          ...doc.data() \n        } as PlantOrItem;\n      });\n      \n      // If there are no store items in the database yet, use demo data\n      if (storeItemsSnapshot.empty) {\n        // Fetch plants\n        const userPlants = await fetchDemoPlants(ownedItems.plants || []);\n        const userAccessories = await fetchDemoAccessories(ownedItems.accessories || []);\n        const userSpecialItems = await fetchDemoSpecialItems(ownedItems.specials || []);\n        \n        setPlants(userPlants);\n        setAccessories(userAccessories);\n        setSpecialItems(userSpecialItems);\n      } else {\n        // Filter owned items\n        const userPlants = ownedItems.plants\n          .map(id => allStoreItems[id])\n          .filter(item => item);\n          \n        const userAccessories = ownedItems.accessories\n          .map(id => allStoreItems[id])\n          .filter(item => item);\n          \n        const userSpecialItems = ownedItems.specials\n          .map(id => allStoreItems[id])\n          .filter(item => item);\n          \n        setPlants(userPlants);\n        setAccessories(userAccessories);\n        setSpecialItems(userSpecialItems);\n      }\n    } catch (err: any) {\n      console.error('Error fetching user items:', err);\n      setError('Failed to load your greenhouse inventory: ' + err.message);\n    }\n  };\n  \n  // If no store items exist yet, use demo data\n  const fetchDemoPlants = async (ownedPlantIds: string[]) => {\n    // This simulates fetching plants from a database\n    const demoPlants = [\n      {\n        id: 'plant1',\n        name: 'Sunflower',\n        image: '/images/plants/sunflower.png',\n        description: 'A tall, cheerful flower that follows the sun. Sunflowers represent adoration, loyalty, and longevity.',\n        seedCost: 10,\n        type: 'plant' as const\n      },\n      {\n        id: 'plant2',\n        name: 'Oak Tree',\n        image: '/images/plants/oak.png',\n        description: 'A strong, majestic tree that can live for hundreds of years. Oak trees symbolize strength, endurance, and wisdom.',\n        seedCost: 50,\n        type: 'plant' as const\n      },\n      {\n        id: 'plant3',\n        name: 'Rose Bush',\n        image: '/images/plants/rose.png',\n        description: 'Beautiful flowers with thorny stems. Roses are traditional symbols of love and passion.',\n        seedCost: 25,\n        type: 'plant' as const\n      },\n      {\n        id: 'plant6',\n        name: 'Lavender Bush',\n        image: '/images/plants/lavender.png',\n        description: 'A calming purple plant known for its soothing aroma and beautiful blooms.',\n        seedCost: 20,\n        type: 'plant' as const\n      },\n      {\n        id: 'plant7',\n        name: 'Apple Tree',\n        image: '/images/plants/apple-tree.png',\n        description: 'A fruit-bearing tree that produces delicious apples. A symbol of abundance and nourishment.',\n        seedCost: 75,\n        type: 'plant' as const\n      }\n    ];\n    \n    // Filter to return only owned plants\n    return demoPlants.filter(plant => ownedPlantIds.includes(plant.id));\n  };\n  \n  const fetchDemoAccessories = async (ownedAccessoryIds: string[]) => {\n    const demoAccessories = [\n      {\n        id: 'accessory1',\n        name: 'Watering Can',\n        image: '/images/accessories/watering-can.png',\n        description: 'A decorative watering can for your virtual greenhouse.',\n        seedCost: 20,\n        type: 'accessory' as const\n      },\n      {\n        id: 'accessory2',\n        name: 'Garden Bench',\n        image: '/images/accessories/bench.png',\n        description: 'A peaceful place to sit and admire your plants.',\n        seedCost: 30,\n        type: 'accessory' as const\n      },\n      {\n        id: 'accessory3',\n        name: 'Bird Bath',\n        image: '/images/accessories/bird-bath.png',\n        description: 'Attract virtual birds to your greenhouse.',\n        seedCost: 35,\n        type: 'accessory' as const\n      },\n      {\n        id: 'accessory4',\n        name: 'Compost Bin',\n        image: '/images/accessories/compost.png',\n        description: 'A natural way to recycle plant waste and boost your greenhouse\\'s eco-friendly feel.',\n        seedCost: 25,\n        type: 'accessory' as const\n      },\n      {\n        id: 'accessory5',\n        name: 'Plant Shelf',\n        image: '/images/accessories/plant-shelf.png',\n        description: 'An attractive wooden shelf perfect for organizing and displaying your smaller plants.',\n        seedCost: 35,\n        type: 'accessory' as const\n      }\n    ];\n    \n    return demoAccessories.filter(acc => ownedAccessoryIds.includes(acc.id));\n  };\n  \n  const fetchDemoSpecialItems = async (ownedSpecialIds: string[]) => {\n    const demoSpecialItems = [\n      {\n        id: 'special1',\n        name: 'Rare Orchid',\n        image: '/images/plants/rare-orchid.png',\n        description: 'An ultra-rare flower with stunning blooms. A true collector\\'s item for your greenhouse.',\n        seedCost: 150,\n        type: 'special' as const\n      },\n      {\n        id: 'special2',\n        name: 'Bee Box',\n        image: '/images/accessories/bee-box.png',\n        description: 'Houses virtual bees that help pollinate nearby plants, enhancing their appearance.',\n        seedCost: 40,\n        type: 'special' as const\n      },\n      {\n        id: 'special3',\n        name: 'Holiday Lights',\n        image: '/images/accessories/holiday-lights.png',\n        description: 'Festive lights to brighten your greenhouse during special seasonal events.',\n        seedCost: 20,\n        type: 'special' as const\n      }\n    ];\n    \n    return demoSpecialItems.filter(item => ownedSpecialIds.includes(item.id));\n  };\n\n  // Handle item placement in the greenhouse\n  const handleItemPlace = async (item, room, position) => {\n    if (!user) return;\n    \n    try {\n      // Update the item placement in the database\n      const userRef = doc(db, 'users', user.uid);\n      \n      // Create placement data\n      const placementData = {\n        room,\n        position\n      };\n      \n      // Create the update object using the correct path for the specific item\n      const updateData = {\n        [`itemPlacements.${item.id}`]: placementData,\n        updatedAt: serverTimestamp()\n      };\n      \n      // Update Firestore\n      await updateDoc(userRef, updateData);\n      \n      // Update local state\n      if (item.type === 'plant') {\n        setPlants(prev => prev.map(p => \n          p.id === item.id ? { ...p, placement: placementData } : p\n        ));\n      } else if (item.type === 'accessory') {\n        setAccessories(prev => prev.map(a => \n          a.id === item.id ? { ...a, placement: placementData } : a\n        ));\n      } else if (item.type === 'special') {\n        setSpecialItems(prev => prev.map(s => \n          s.id === item.id ? { ...s, placement: placementData } : s\n        ));\n      }\n    } catch (err) {\n      console.error('Error updating item placement:', err);\n    }\n  };\n\n  // Handle item movement within the greenhouse\n  const handleItemMove = async (item, room, position) => {\n    if (!user) return;\n    \n    try {\n      // Update the item placement in the database\n      const userRef = doc(db, 'users', user.uid);\n      \n      // Create placement data\n      const placementData = {\n        room,\n        position\n      };\n      \n      // Create the update object\n      const updateData = {\n        [`itemPlacements.${item.id}`]: placementData,\n        updatedAt: serverTimestamp()\n      };\n      \n      // Update Firestore\n      await updateDoc(userRef, updateData);\n      \n      // Update local state\n      if (item.type === 'plant') {\n        setPlants(prev => prev.map(p => \n          p.id === item.id ? { ...p, placement: placementData } : p\n        ));\n      } else if (item.type === 'accessory') {\n        setAccessories(prev => prev.map(a => \n          a.id === item.id ? { ...a, placement: placementData } : a\n        ));\n      } else if (item.type === 'special') {\n        setSpecialItems(prev => prev.map(s => \n          s.id === item.id ? { ...s, placement: placementData } : s\n        ));\n      }\n    } catch (err) {\n      console.error('Error updating item placement:', err);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"p-4 bg-red-100 text-red-700 rounded-md\">\n          Error loading your greenhouse. Please try again later.\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-6xl\">\n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-green-800\">Your Greenhouse</h2>\n            <p className=\"text-gray-600\">Arrange your plants and accessories in your virtual greenhouse</p>\n          </div>\n          <div className=\"flex items-center\">\n            <img \n              src=\"/images/seed-icon.png\" \n              alt=\"Seeds\" \n              className=\"w-6 h-6 mr-2\"\n            />\n            <span className=\"font-bold text-green-800\">{profile.seeds}</span>\n          </div>\n        </div>\n        \n        {error && (\n          <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">\n            {error}\n          </div>\n        )}\n        \n        {/* Inventory summary */}\n        <div className=\"grid grid-cols-3 gap-4 mb-6\">\n          <div className=\"bg-green-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium mb-2\">Plants</h3>\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-2\">\n                <img src=\"/images/plants/sunflower.png\" alt=\"Plants\" className=\"w-6 h-6\" />\n              </div>\n              <span className=\"text-lg font-bold\">{plants.length}</span>\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium mb-2\">Accessories</h3>\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-2\">\n                <img src=\"/images/accessories/watering-can.png\" alt=\"Accessories\" className=\"w-6 h-6\" />\n              </div>\n              <span className=\"text-lg font-bold\">{accessories.length}</span>\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium mb-2\">Special Items</h3>\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-2\">\n                <img src=\"/images/accessories/bee-box.png\" alt=\"Special Items\" className=\"w-6 h-6\" />\n              </div>\n              <span className=\"text-lg font-bold\">{specialItems.length}</span>\n            </div>\n          </div>\n        </div>\n        \n        {/* 3D Greenhouse Visualization */}\n        <div className=\"h-[600px] border border-gray-200 rounded-lg overflow-hidden\">\n          <GreenhouseVisualization \n            plants={plants}\n            accessories={accessories}\n            specialItems={specialItems}\n            onItemPlace={handleItemPlace}\n            onItemMove={handleItemMove}\n          />\n        </div>\n        \n        {/* Store link banner */}\n        {plants.length === 0 && accessories.length === 0 && (\n          <div className=\"mt-6 bg-green-50 rounded-lg p-6 text-center\">\n            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Your greenhouse is empty!</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Visit the store to purchase plants and accessories for your greenhouse.\n            </p>\n            <button\n              onClick={() => router.push('/store')}\n              className=\"px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg\"\n            >\n              Visit Store\n            </button>\n          </div>\n        )}\n      </div>\n      \n      {/* Inventory Section */}\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 className=\"text-xl font-bold text-green-800 mb-4\">Your Greenhouse Inventory</h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {/* Plants */}\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center\">\n              <span className=\"w-5 h-5 bg-green-100 rounded-full mr-2\"></span>\n              Plants\n            </h3>\n            \n            {plants.length === 0 ? (\n              <div className=\"bg-gray-50 p-4 rounded text-center text-gray-500\">\n                No plants yet\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 gap-3\">\n                {plants.map((plant) => (\n                  <div \n                    key={plant.id} \n                    className=\"border rounded-lg p-3 cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => {\n                      setSelectedItem(plant);\n                      setShowItemDetails(true);\n                    }}\n                  >\n                    <div className=\"flex justify-center mb-2\">\n                      <div className=\"w-16 h-16 bg-green-50 rounded-full flex items-center justify-center\">\n                        <img \n                          src={plant.image} \n                          alt={plant.name}\n                          className=\"w-12 h-12 object-contain\"\n                        />\n                      </div>\n                    </div>\n                    <h4 className=\"text-sm font-medium text-center\">{plant.name}</h4>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          {/* Accessories */}\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center\">\n              <span className=\"w-5 h-5 bg-yellow-100 rounded-full mr-2\"></span>\n              Accessories\n            </h3>\n            \n            {accessories.length === 0 ? (\n              <div className=\"bg-gray-50 p-4 rounded text-center text-gray-500\">\n                No accessories yet\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 gap-3\">\n                {accessories.map((accessory) => (\n                  <div \n                    key={accessory.id} \n                    className=\"border rounded-lg p-3 cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => {\n                      setSelectedItem(accessory);\n                      setShowItemDetails(true);\n                    }}\n                  >\n                    <div className=\"flex justify-center mb-2\">\n                      <div className=\"w-16 h-16 bg-yellow-50 rounded-full flex items-center justify-center\">\n                        <img \n                          src={accessory.image} \n                          alt={accessory.name}\n                          className=\"w-12 h-12 object-contain\"\n                        />\n                      </div>\n                    </div>\n                    <h4 className=\"text-sm font-medium text-center\">{accessory.name}</h4>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          {/* Special Items */}\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center\">\n              <span className=\"w-5 h-5 bg-purple-100 rounded-full mr-2\"></span>\n              Special Items\n            </h3>\n            \n            {specialItems.length === 0 ? (\n              <div className=\"bg-gray-50 p-4 rounded text-center text-gray-500\">\n                No special items yet\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 gap-3\">\n                {specialItems.map((item) => (\n                  <div \n                    key={item.id} \n                    className=\"border rounded-lg p-3 cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => {\n                      setSelectedItem(item);\n                      setShowItemDetails(true);\n                    }}\n                  >\n                    <div className=\"flex justify-center mb-2\">\n                      <div className=\"w-16 h-16 bg-purple-50 rounded-full flex items-center justify-center\">\n                        <img \n                          src={item.image} \n                          alt={item.name}\n                          className=\"w-12 h-12 object-contain\"\n                        />\n                      </div>\n                    </div>\n                    <h4 className=\"text-sm font-medium text-center\">{item.name}</h4>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Visit Store Banner */}\n        <div className=\"mt-8 border-t pt-6\">\n          <div className=\"bg-green-50 rounded-lg p-4 flex justify-between items-center\">\n            <div>\n              <h3 className=\"font-medium text-green-800\">Need more plants or accessories?</h3>\n              <p className=\"text-sm text-gray-600\">Visit the store to expand your collection.</p>\n            </div>\n            <button\n              onClick={() => router.push('/store')}\n              className=\"px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md\"\n            >\n              Visit Store\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Item Details Modal */}\n      {showItemDetails && selectedItem && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-lg max-w-md w-full p-6\">\n            <div className=\"flex justify-between items-start mb-4\">\n              <h3 className=\"text-xl font-semibold\">{selectedItem.name}</h3>\n              <button\n                onClick={() => setShowItemDetails(false)}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n            \n            <div className=\"flex justify-center mb-4\">\n              <div className=\"w-32 h-32 rounded-full flex items-center justify-center bg-green-50\">\n                <img \n                  src={selectedItem.image} \n                  alt={selectedItem.name}\n                  className=\"w-24 h-24 object-contain\"\n                />\n              </div>\n            </div>\n            \n            <p className=\"text-gray-600 mb-4\">{selectedItem.description}</p>\n            \n            <div className=\"bg-gray-50 p-3 rounded-md mb-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Seed Cost:</span>\n                <div className=\"flex items-center\">\n                  <img \n                    src=\"/images/seed-icon.png\" \n                    alt=\"Seeds\" \n                    className=\"w-4 h-4 mr-1\"\n                  />\n                  <span className=\"font-bold\">{selectedItem.seedCost}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <button\n                onClick={() => setShowItemDetails(false)}\n                className=\"px-4 py-2 border rounded-md text-gray-600 hover:bg-gray-50\"\n              >\n                Close\n              </button>\n              \n              {!selectedItem.placement && (\n                <button\n                  onClick={() => {\n                    setShowItemDetails(false);\n                    // Code to place item in greenhouse visualization\n                  }}\n                  className=\"px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md\"\n                >\n                  Place in Greenhouse\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Greenhouse;"],"names":[],"mappings":"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","debugId":null}}]
}